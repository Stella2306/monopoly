import numpy as np
import sys
import scipy.linalg as la

def CalculateRollProbabilites ():
    #probability of rolling each number of the dice
    rollProbabilities = [1,2,3,4,5,6,5,4,3,2,1]
    # x=number of steps to get to a tile from go
    rollProbabilities = [x / 36 for x in rollProbabilities]
    return (rollProbabilities)


#Function to create the roll matrix
def CreateMatrix (probabilities, matrix, counter, dim):
    if counter == dim:
        return (matrix)

    lastElement = probabilities.pop()
    probabilities = [lastElement] +probabilities
    matrix[:,counter] = probabilities
    CreateMatrix (probabilities, matrix, counter+1, dim)

###################################################################################################################################
goSquareProbabilities = [0]*39
goSquareProbabilities[2:13] = CalculateRollProbabilites()
rollMatrix = np.zeros((39, 39))
rollMatrix[:,0] = goSquareProbabilities
CreateMatrix(goSquareProbabilities, rollMatrix, 1, 39)
print(goSquareProbabilities)

######################################################################################################################################

######################################################################################################################################
goToJailRow = [1] + [0]*38
goToJailMatrix = np.zeros((39, 39))
goToJailMatrix[0] = goToJailRow
# 38 IN TOTAL IN THE MATRIX
CreateMatrix(goToJailRow, goToJailMatrix,1,39)
print(goToJailRow)
######################################################################################################################################
